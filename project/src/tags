!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ERROR	ben_LinkList.c	3;"	d	file:
ElemData	ben_LinkList.c	/^typedef int ElemData;$/;"	t	file:
ListNode	ben_LinkList.c	/^typedef Node *ListNode;$/;"	t	file:
ListNode	list.cpp	/^typedef struct ListNode{$/;"	s	file:
ListNode	list.cpp	/^}ListNode;$/;"	t	typeref:struct:ListNode	file:
Node	ben_LinkList.c	/^typedef struct Node$/;"	s	file:
Node	ben_LinkList.c	/^}Node;$/;"	t	typeref:struct:Node	file:
OK	ben_LinkList.c	4;"	d	file:
a	a.cpp	/^class a{$/;"	c	file:
addFirst	ben_LinkList.c	/^void addFirst(ListNode *listHead,ElemData data)$/;"	f
addNode	list.cpp	/^void addNode(ListNode **pHead, elemType pdata)$/;"	f
addTail	ben_LinkList.c	/^void addTail(ListNode *listHead,ElemData data)$/;"	f
clearList	ben_LinkList.c	/^void clearList(ListNode *listHead)$/;"	f
createList	ben_LinkList.c	/^void createList(ListNode *listHead)$/;"	f
createList	list.cpp	/^void createList(ListNode **pHead)$/;"	f
data	ben_LinkList.c	/^	ElemData data;$/;"	m	struct:Node	file:
data	list.cpp	/^	elemType data;$/;"	m	struct:ListNode	file:
elemType	list.cpp	/^typedef int elemType;$/;"	t	file:
f	a.cpp	/^void f()$/;"	f
insert	ben_LinkList.c	/^void insert(ListNode *listHead,ElemData data, int place)$/;"	f
listHead	ben_LinkList.c	/^ListNode listHead;\/\/with head$/;"	v
main	a.cpp	/^int main()$/;"	f
main	ben_LinkList.c	/^int main()$/;"	f
main	list.cpp	/^int main()$/;"	f
main	merge.cpp	/^int main()$/;"	f
main	quickSort.cpp	/^int main()$/;"	f
main	shared_ptr.cpp	/^int main()$/;"	f
main	socket_client.c	/^int main(int argc,char *argv[])$/;"	f
main	socket_server.c	/^int main()$/;"	f
merge	merge.cpp	/^void merge(int *a,int begin,int end)$/;"	f
mergeSort	merge.cpp	/^void mergeSort(int *a, int begin, int t, int end)$/;"	f
next	ben_LinkList.c	/^	struct Node *next;$/;"	m	struct:Node	typeref:struct:Node::Node	file:
next	list.cpp	/^	ListNode *next;$/;"	m	struct:ListNode	file:
printList	ben_LinkList.c	/^void printList(ListNode listHead)$/;"	f
printfList	list.cpp	/^void printfList(ListNode *pHead)$/;"	f
quickSort	quickSort.cpp	/^void quickSort(int *a,int l,int r)$/;"	f
remove1	ben_LinkList.c	/^void remove1(ListNode *listHead,int place)$/;"	f
socket_connect	socket_client.c	/^int socket_connect(char *host,int port)$/;"	f
socket_listen	socket_server.c	/^int socket_listen(int port)$/;"	f
~a	a.cpp	/^	~a()$/;"	f	class:a
